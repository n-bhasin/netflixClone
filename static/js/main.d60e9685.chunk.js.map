{"version":3,"sources":["services/axios.js","components/row/Row.jsx","services/request.js","components/banner/Banner.jsx","components/navbar/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","movieUrl","isLargeRow","useState","movies","setMovies","trailerUrl","useEffect","a","get","response","data","results","fetchData","className","map","movie","videoId","opts","height","width","playerVars","autoplay","API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundPosition","backgroundRepeat","backgroundImage","backdrop_path","name","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d60e9685.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** url to make request to movie db */\nconst instance = axios.create({ baseURL: \"https://api.themoviedb.org/3\" });\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../../services/axios\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport \"./row.css\";\n\nconst url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = ({ title, movieUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const response = await axios.get(movieUrl);\n      setMovies(response.data.results);\n      return response;\n    }\n    fetchData();\n  }, [movieUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    console.log(movie);\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          console.log(url);\n          const urlParams = new URLSearchParams(new URL(url).search);\n          console.log(urlParams);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {/* list of posters */}\n        {movies.map((movie) => {\n          return (\n            //using isLargeRow to distinguish between netflix original and other images\n            //also making some changes with css\n            <img\n              key={movie.id}\n              className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n              onClick={() => handleClick(movie)}\n              src={`${url}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n};\n\nexport default Row;\n","const API_KEY = \"19eaec1dc94276280892877e087b7bfe\";\n\nconst request = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default request;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"../../services/axios\";\nimport request from \"../../services/request\";\nimport \"./banner.css\";\n\nconst Banner = () => {\n  const [movie, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data } = await axios.get(request.fetchNetflixOriginals);\n      //getting randomness we use Math.floor(Math.random() * data.results.length-1);\n      setMovies(\n        data.results[Math.floor(Math.random() * data.results.length - 1)]\n      );\n      return data;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n      }}\n    >\n      {/* background image */}\n      {/* title */}\n      {/* div> 2 buttons */}\n      {/* descriptions */}\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner--fadeBottom\"></div>\n    </header>\n  );\n};\n\nexport default Banner;\n","import React from \"react\";\nimport \"./navbar.css\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst Navbar = () => {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => window.removeEventListener(\"scroll\");\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"netflix logo\"\n      />\n      <img\n        className=\"nav_avatar\"\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n        alt=\"netflix avatar\"\n      />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport Row from \"./components/row/Row\";\nimport request from \"./services/request\";\nimport \"./App.css\";\nimport Banner from \"./components/banner/Banner\";\nimport Navbar from \"./components/navbar/navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        movieUrl={request.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" movieUrl={request.fetchTrending} />\n      <Row title=\"Top Rated\" movieUrl={request.fetchTopRated} />\n      <Row title=\"Action Movies\" movieUrl={request.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" movieUrl={request.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" movieUrl={request.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" movieUrl={request.fetchRomanceMovies} />\n      <Row title=\"Documentaries Movies\" movieUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}